
/*** room_access sets room to private or public ***/
void room_access(int user, int priv)
{
int f,area=ustr[user].area;
char *noset="This rooms access cannot be set";
char pripub[2][15];
int spys = 0,u;

strcpy(pripub[0],"^HYpublic^");
strcpy(pripub[1],"^HRprivate^");

for (f = 0; f < strlen(area_nochange); ++f) 
  {
   if (area_nochange[f] == area+65) 
     {
       write_str(user,noset);  
       return;
      }
  }

/* see if access already set to user request */
if (priv==astr[area].private) 
  {
   sprintf(mess,"The room is already %s!",pripub[priv]);
   write_str(user,mess);  
   return;
  }

/* set to public */
if (!priv) 
  {
   write_str(user,"Room now set to ^HYpublic^");
   sprintf(mess,"%s has set the room to ^HYpublic^",ustr[user].say_name);
   
   if (!ustr[user].vis) 
     sprintf(mess,"%s has set the room to ^HYpublic^",INVIS_ACTION_LABEL);
     
   writeall_str(mess, 1, user, 0, user, NORM, NONE, 0);
	
   cbuff(user); 
   astr[area].private=0;
   return;
  }

/* need at least PRINUM people to set room to private unless u r superuser */
if ((find_num_in_area(area) < PRINUM) && ustr[user].tempsuper < PRIV_ROOM_RANK)
  {
   sprintf(mess,"You need at least %d people in the room",PRINUM);
   write_str(user,mess);
   return;
  };
  
write_str(user,"Room now set to ^HRprivate^");

for (u=0; u<MAX_USERS; ++u) 
 {
   if (ustr[u].area == area && !ustr[u].vis) spys++;
 }
   
sprintf(mess,"%s has set the room to ^HRprivate^",ustr[user].say_name);

if (!ustr[user].vis)
   sprintf(mess,"%s has set the room to ^HRprivate^",INVIS_ACTION_LABEL);

writeall_str(mess, 1, user, 0, user, NORM, NONE, 0);

if (spys)
  {
    sprintf(mess,VIS_IN_HERE,spys == 1 ? "is" : "are",spys,spys == 1 ? "" : "s");
    writeall_str(mess, 1, user, 0, user, BOLD, NONE, 0);
    write_str(user,mess);
  }
   
astr[area].private=1;
}

