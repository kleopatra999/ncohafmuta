head	1.5;
access;
symbols;
locks
	leo:1.5; strict;
comment	@# @;


1.5
date	96.08.29.16.37.06;	author leo;	state Exp;
branches;
next	1.4;

1.4
date	96.06.10.16.01.55;	author leo;	state Exp;
branches;
next	1.3;

1.3
date	96.03.22.11.47.27;	author msmeissn;	state Exp;
branches;
next	1.2;

1.2
date	96.03.22.11.47.13;	author msmeissn;	state Exp;
branches;
next	1.1;

1.1
date	96.03.18.20.41.19;	author leo;	state Exp;
branches;
next	;


desc
@@


1.5
log
@added @@version and @@author
@
text
@/**
 * CharDisplayTest
 * --
 * $Id: CharDisplayTest.java,v 1.4 1996/06/10 16:01:55 leo Exp leo $
 * $timestamp: Sun Mar 31 00:06:38 1996 by leo :$
 *
 * This file is part of "The Java Telnet Applet".
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * "The Java Telnet Applet" is distributed in the hope that it will be 
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

import java.applet.Applet;
import java.awt.Button;
import java.awt.Panel;
import java.awt.Event;
import java.awt.FlowLayout;
import java.awt.BorderLayout;

import display.CharDisplay;

/**
 * CharDisplayTest -- a test applet to show the display/CharDisplay features
 * --
 * @@version	$Id$
 * @@author	Matthias L. Jugel
 */
public class CharDisplayTest extends Applet
{
  CharDisplay display = new CharDisplay(80, 24, "Courier", 14);

  Panel buttons = new Panel();
  Button info = new Button("Information");
  Button chars = new Button("Character Table");
  Button attr = new Button("Attributes");

  public void init()
  {
    setLayout(new BorderLayout());
    buttons.add(info);
    buttons.add(chars);
    buttons.add(attr);
    add("North", buttons);
    display.setResizeStrategy(CharDisplay.RESIZE_FONT);
    add("Center", display);
    Info();
  }
  
  public boolean handleEvent(Event evt)
  {
    if(evt.target == info) Info();
    if(evt.target == chars) CharacterTable();
    if(evt.target == attr) Attributes();

    return true;
  }

  private void Clear()
  {
    display.deleteArea(0, 0, 80, 24);
  }
    
  private void Info()
  {
    Clear();
    display.putString(4, 1, "CharDisplay.class Information", CharDisplay.INVERT);
    display.putString(4, 3, "Version: "+display.version, CharDisplay.BOLD);
    display.putString(4, 5, "This class implements several hardware features needed to implement");
    display.putString(4, 6, "a video terminal.");
    display.putString(4, 7, "This includes simple operations, such as putting and inserting single");
    display.putString(4, 8, "characters or strings on the screen, character attributes and colors.");
    display.putString(4, 9, "Special features like inserting lines, scrolling text up or down and");
    display.putString(4,10, "defining scrollareas help implementing terminal emulations.");
    display.redraw();
  }
    
  private void CharacterTable()
  {
    int ch = 0;
    
    Clear();
    display.putString( 4, 1, "Character Table", CharDisplay.INVERT);
    for(int c = 1; c < 80; c += 6)
      for(int l = 3; l < 23; l++)
      {
	if(ch > 256) continue;
	display.putString(c, l, ""+ch, CharDisplay.INVERT);
	display.putChar(c+4, l, (char)ch++);
	display.redraw();
      }
  }

  private void Attributes()
  {
    int c = 4, l = 8;
    
    Clear();
    display.putString( 4, 1, "Character attributes", CharDisplay.INVERT);
    display.putString( 4, 3, "Normal", CharDisplay.NORMAL);
    display.putString(22, 3, "Bold", CharDisplay.BOLD);
    display.putString(40, 3, "Underline", CharDisplay.UNDERLINE);
    display.putString(58, 3, "Invert", CharDisplay.INVERT);

    display.putString( 4, 5, "Black", 1 << 3 | 8 << 7);
    display.putString(13, 5, "Red", 2 << 3);
    display.putString(22, 5, "Green", 3 << 3);
    display.putString(31, 5, "Yellow", 4 << 3);
    display.putString(40, 5, "Blue", 5 << 3);
    display.putString(49, 5, "Magenta", 6 << 3);
    display.putString(58, 5, "Cyan", 7 << 3);
    display.putString(67, 5, "LightGray", 8 << 3);
    
    for(int bg = 1; bg <= 8; bg++)
    {
      for(int fg = 1; fg <= 8; fg++)
      {
	for(int a = 0; a <= 7; a++)
	{
	  display.putChar(c++, l, '@@', (fg << 3) | (bg << 7) | a);
	  display.redraw();
	}
	c++;
      }
      l += 2; c = 4;
    }
    
  }
}
@


1.4
log
@final revision.
@
text
@d4 1
a4 1
 * $Id: CharDisplayTest.java,v 1.3 1996/03/22 11:47:27 msmeissn Exp leo $
d20 1
a20 1
 * along with GNU Emacs; see the file COPYING.  If not, write to the
d34 6
@


1.3
log
@*** empty log message ***
@
text
@d4 19
a22 2
 * $Id: CharDisplayTest.java,v 1.1 1996/03/18 20:41:19 leo Exp $
 * $timestamp: Thu Mar 21 12:13:18 1996 by Matthias L. Jugel :$
d26 4
d34 1
a34 1
public class CharDisplayTest extends Applet implements Runnable
d36 1
a36 2
  CharDisplay display = new CharDisplay();
  Thread reader = new Thread(this);
d38 5
d45 8
a52 2
     setLayout(new BorderLayout());
     add("Center", display);
d55 1
a55 1
  public void start()
d57 5
a61 23
    for(int l = 0; l < 24; l++)
      display.putString(0, l, l+"");
     
    for(int l = 0; l < 24; l++)
      for(int c = 0; c < 80; c++)
	if(c > 10 && c < 70 && l > 5 && l < 19)
	{
	  display.putChar(c, l, (char)(33+l+c), 
			  CharDisplay.BOLD | CharDisplay.UNDERLINE |
			  (((l%7)<<6) + ((c%7)<<3))) ;
	}
	else
	  display.putChar(c, l, (char)(33+l+c), 
			  CharDisplay.NORMAL);
    display.insertLine(5);
    display.insertLine(20);
    display.deleteLine(15);
    display.insertChar(5, 4, '@@', CharDisplay.UNDERLINE | CharDisplay.INVERT);
    display.deleteChar(2, 2);
    display.deleteLine(0);
    display.deleteLine(23);
    reader.setPriority(Thread.MIN_PRIORITY);
    reader.start();
d63 2
a64 2
  
  public void run()
d66 2
a67 1
    int counter = 20;
d69 51
a119 1
    while(true)
d121 1
a121 6
      display.insertLine(display.getRows()-1);
      display.putString(0, display.getRows()-1, "12345678901234567890", CharDisplay.UNDERLINE | CharDisplay.INVERT);
      for(int i = 20; i >= 0; i--)
	display.insertChar(0, display.getRows()-1, (char)(32+i+counter%128), 
			   CharDisplay.NORMAL | ((i % 7) << 6));
      if(--counter < 0) 
d123 6
a128 5
	if(display.getRows() <= 10)
	  display.setWindowSize(80, 24);
	else
	  display.setWindowSize(10, 10);
	counter = 20;
d130 1
d132 1
@


1.2
log
@*** empty log message ***
@
text
@@


1.1
log
@Initial revision
@
text
@d4 2
a5 2
 * $Id$
 * $timestamp: Sat Mar 16 18:10:18 1996 by Matthias L. Jugel :$
d16 1
d32 5
a36 1
	  display.putChar(c, l, (char)(33+l+c), CharDisplay.BOLD | CharDisplay.UNDERLINE);
d38 2
a39 1
	  display.putChar(c, l, (char)(33+l+c), CharDisplay.NORMAL);
a46 1
    Thread reader = new Thread(this);
d53 1
a53 1
    int counter = 10;
d57 2
a58 2
      display.insertLine(23);
      display.putString(0, 23, "12345678901234567890", CharDisplay.UNDERLINE | CharDisplay.INVERT);
d60 10
a69 2
	display.insertChar(0, 23, (char)(32+i+counter%128), CharDisplay.NORMAL);
      if(--counter < 0) counter = 129;
@
