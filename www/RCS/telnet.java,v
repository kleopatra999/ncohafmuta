head	1.22;
access;
symbols;
locks
	leo:1.22; strict;
comment	@# @;


1.22
date	96.11.04.09.22.05;	author leo;	state Exp;
branches;
next	1.21;

1.21
date	96.09.17.12.09.19;	author leo;	state Exp;
branches;
next	1.20;

1.20
date	96.09.09.06.34.07;	author leo;	state Exp;
branches;
next	1.19;

1.19
date	96.09.06.06.54.43;	author leo;	state Exp;
branches;
next	1.18;

1.18
date	96.09.05.11.54.50;	author leo;	state Exp;
branches;
next	1.17;

1.17
date	96.08.29.15.31.13;	author leo;	state Exp;
branches;
next	1.16;

1.16
date	96.07.19.12.31.06;	author leo;	state Exp;
branches;
next	1.15;

1.15
date	96.07.10.15.31.38;	author leo;	state Exp;
branches;
next	1.14;

1.14
date	96.07.03.08.07.12;	author leo;	state Exp;
branches;
next	1.13;

1.13
date	96.07.02.18.30.22;	author leo;	state Exp;
branches;
next	1.12;

1.12
date	96.07.02.18.21.19;	author leo;	state Exp;
branches;
next	1.11;

1.11
date	96.07.02.17.39.38;	author leo;	state Exp;
branches;
next	1.10;

1.10
date	96.07.02.17.34.35;	author leo;	state Exp;
branches;
next	1.9;

1.9
date	96.06.28.10.35.34;	author leo;	state Exp;
branches;
next	1.8;

1.8
date	96.06.10.16.01.55;	author leo;	state Exp;
branches;
next	1.7;

1.7
date	96.03.28.23.42.08;	author msmeissn;	state Exp;
branches;
next	1.6;

1.6
date	96.03.27.15.00.44;	author msmeissn;	state Exp;
branches;
next	1.5;

1.5
date	96.03.27.13.47.08;	author leo;	state Exp;
branches;
next	1.4;

1.4
date	96.03.22.11.46.37;	author leo;	state Exp;
branches;
next	1.3;

1.3
date	96.03.21.13.54.11;	author leo;	state Exp;
branches;
next	1.2;

1.2
date	96.03.18.20.41.19;	author leo;	state Exp;
branches;
next	1.1;

1.1
date	96.03.17.18.07.18;	author leo;	state Exp;
branches;
next	;


desc
@telnet applet
@


1.22
log
@detaching the applet with |$\detach()
@
text
@/**
 * telnet -- implements a simple telnet
 * --
 * $Id: telnet.java,v 1.21 1996/09/17 12:09:19 leo Exp leo $
 * $timestamp: Mon Nov  4 10:18:06 1996 by Matthias L. Jugel :$
 *
 * This file is part of "The Java Telnet Applet".
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * "The Java Telnet Applet" is distributed in the hope that it will be 
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

import java.applet.Applet;
import java.awt.Component;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.Scrollbar;
import java.awt.Event;
import java.awt.Dimension;
import java.awt.Panel;
import java.awt.Frame;
import java.awt.TextField;
import java.awt.Button;
import java.util.Vector;
import java.util.Hashtable;
import java.util.Enumeration;
import java.io.IOException;

import socket.TelnetIO;
import socket.StatusPeer;

import display.Terminal;

/**
 * A telnet implementation that supports different terminal emulations.
 * @@version $Id: telnet.java,v 1.21 1996/09/17 12:09:19 leo Exp leo $
 * @@author  Matthias L. Jugel, Marcus Meißner
 */
public class telnet extends Applet implements Runnable, StatusPeer
{
  /**
   * The telnet io methods.
   * @@see socket.TelnetIO
   */
  protected TelnetIO tio;
  /**
   * The terminal emulation (dynamically loaded).
   * @@see emulation
   */
  protected Terminal term;

  /**
   * The host address to connect to.
   */
  protected String address;
  /**
   * The port number (default ist 23).
   */
  protected int port;
  /**
   * Emulation type (default is vt320).
   */
  protected String emulation;

  private Panel p = new Panel();
  private Hashtable buttons = null;
  private Hashtable fields = null;

  private Hashtable script = null;

  private boolean localecho = true;
  private boolean connected = false;
  private int pressedKey = ' ';

  private boolean detached = false;

  private Thread t;

  public Hashtable params;
    
  public String[][] getParameterInfo()
  {
    String pinfo[][];
    String info[][] = {
      {"address",  "String",   "IP address"},
      {"port",     "Integer",  "Port number"},
      {"emulation","String",   "Emulation to be used (standard is vt320)"},
    };
    String tinfo[][] = (term != null ? term.getParameterInfo() : null);
    if(tinfo != null) pinfo = new String[tinfo.length + 3][3];
    else pinfo = new String[3][3];
    System.arraycopy(info, 0, pinfo, 0, 3);
    System.arraycopy(tinfo, 0, pinfo, 3, tinfo.length);
    return pinfo;
  }

  public String getParameter(String name)
  {
    if(params == null) return super.getParameter(name);
    return (String)params.get(name);
  }

  /**
   * The main function is called on startup of the application.
   */
  public static void main(String args[]) 
  {
    telnet applet = new telnet();
    Frame frame = new Frame("telnet");

    frame.setLayout(new BorderLayout());
    frame.add("Center", applet);
    frame.resize(380, 590);

    // create params from command line arguments
    applet.params = new Hashtable();
    switch(args.length) 
    {
    case 2: applet.params.put("port", args[1]);
    case 1: applet.params.put("address", args[0]); 
      break;
    default: 
      System.out.println("Usage: java telnet host [port]");
      System.exit(0);
    } 
    applet.params.put("VTscrollbar", "true");
    applet.params.put("1#Button", "Exit|\\$exit()");
    applet.params.put("2#Button", "Connect|\\$connect(\\@@address@@,\\@@port@@)");
    applet.params.put("3#Input", "address#30|"
		      +(args.length > 0 ? args[0] : "localhost"));
    applet.params.put("4#Input", "port#4|23");
    applet.params.put("5#Button", "Disconnect|\\$disconnect()");

    applet.init();
    applet.start();

    frame.pack();
    frame.show();
  }
  
  /**
   * Initialize applet.
   */
  public void init()
  {
    String tmp; 

    if((address = getParameter("address")) == null)
      address = getDocumentBase().getHost();
    if((tmp = getParameter("port")) == null) 
      port = 23;
    else
      port = (new Integer(tmp)).intValue();
    
    if((emulation = getParameter("emulation")) == null)
      emulation = "vt320";

    try {
      term = (Terminal)Class.forName("display."+emulation).newInstance();
      term.InitializeTerminal(this);
      term.setPeer(this);
    } catch(Exception e) {
      e.printStackTrace();
    }

    int nr = 1;
    String button = null, input = null;
    while((button = getParameter(nr+"#Button")) != null ||
	  (input = getParameter(nr+"#Input")) != null)
    {
      nr++;
      if(button != null)
      {
	if(buttons == null) buttons = new Hashtable();
	int idx = button.indexOf('|');
	if(button.length() == 0)
	  System.out.println("ERROR: Button: no definition");
	if(idx < 0 || idx == 0)
	{
	  System.out.println("ERROR: Button: empty name \""+button+"\"");
	  continue;
	}
	if(idx == button.length() - 1)
	{
	  System.out.println("ERROR: Button: empty command \""+button+"\"");
	  continue;
	}
	Button b = new Button(button.substring(0, idx));
	buttons.put(b, button.substring(idx+1, button.length()));
	p.add(b);
      } else
      if(input != null)
      {
	if(fields == null) fields = new Hashtable();
	int idx = input.indexOf('|');
	if(input.length() == 0)
	System.out.println("ERROR: Input field: no definition");
	if(idx < 0 || idx == 0)
	{
	  System.out.println("ERROR: Input field: empty name \""+input+"\"");
	  continue;
	}
	int si, size;
	if((si = input.indexOf('#', 0)) == 0)
	{
	  System.out.println("ERROR: Input field: empty name");
	  continue;
	}
	if(si < 0 || si == idx-1) size = 10;
	else size = Integer.parseInt(input.substring(si+1, idx));
	TextField t = new TextField(input.substring(idx + 1, input.length()), size);
	fields.put(input.substring(0, (si < 0 ? idx : si)), t);
	p.add(t);
      }
      button = input = null;
    }
    
    setLayout(new BorderLayout());
    if(buttons != null || fields != null) add("North", p);
    add("Center", term);

    if((tmp = getParameter("script")) != null)
    {
      script = new Hashtable();
      int idx = tmp.indexOf('|');
      int oldidx = 0;
      while(idx >= 0) {
	String match = tmp.substring(oldidx, idx);
	oldidx = idx;
	idx = tmp.indexOf('|', idx+1);
	idx = idx < 0 ? idx = tmp.length() : idx;
	String send = tmp.substring(oldidx+1, idx);
	System.out.println("SCRIPT: MATCH("+match+") -> SEND("+send+")");
	script.put(match, send+"\r");
	oldidx = idx+1;
	idx = tmp.indexOf('|', idx+1);
      }
    }
  }

  public void start()
  {
    if(t == null)
      try {
	try {
	  tio = new TelnetIO();
	  tio.setPeer(this);
	  term.putString("Trying "+address+(port==23?"":" "+port)+" ...\n\r");
	  tio.connect(address, port);
	  term.putString("Connected to "+address+".\n\r");
	  connected = true;
	  localecho = true;
	} catch(IOException e) {
	  term.putString("Failed to connect.\n\r");
	  e.printStackTrace();
	}
        t = new Thread(this);
        t.setPriority(Thread.MIN_PRIORITY);
        t.start();
      } catch(Exception e) {
        e.printStackTrace();
      }
  }

  public void run()
  {
    while(t != null)
      try {
        String tmp = new String(tio.receive(), 0);
	if(script != null)
	{
	  Enumeration match = script.keys();
	  while(match.hasMoreElements())
	  {
	    String key = (String)match.nextElement();
	    if(tmp.indexOf(key) != -1)
	    {
	      int len = ((String)script.get(key)).length();
	      byte str[] = new byte[len];
	      ((String)script.get(key)).getBytes(0, len, str, 0);
	      tio.send(str);
	      script.remove(key);
	    }
	  }
	  if(script.isEmpty()) 
	  { 
	    script = null;
	    System.out.println("SCRIPT: DONE.");
	  }
	}
        term.putString(tmp);
      } catch(IOException e) {
	t.stop();
	try {
	  tio.disconnect();
	  term.putString("\n\rConnection closed.\n\r");
	  connected = false;
	} catch(IOException _e) {
	  _e.printStackTrace();
	}
      }
  }

  public boolean handleEvent(Event evt)
  {
    if(evt.id == Event.ACTION_EVENT && buttons.get(evt.target) != null)
    {
      String tmp = (String)buttons.get(evt.target);
      String cmd = "", function = null;
      int idx = 0, oldidx = 0;
      while((idx = tmp.indexOf('\\', oldidx)) >= 0 && ++idx <= tmp.length())
      {
	cmd += tmp.substring(oldidx, idx-1);
	switch(tmp.charAt(idx))
	{
	case 'n': cmd += "\n"; break;
	case 'r': cmd += "\r"; break;
	case '$':
	{
	  int ni = tmp.indexOf('(', idx+1);
	  if(ni < idx)
	  {
	    System.out.println("ERROR: Function: missing '('");
	    break;
	  }
	  if(ni == ++idx)
	  {
	    System.out.println("ERROR: Function: missing name");
	    break;
	  }
	  function = tmp.substring(idx, ni);
	  idx = ni+1;
	  ni = tmp.indexOf(')', idx);
	  if(ni < idx)
	  {
	    System.out.println("ERROR: Function: missing ')'");
	    break;
	  }
	  tmp = tmp.substring(idx, ni);
	  idx = oldidx = 0;
	  continue;
	}
	case '@@': 
	{
	  int ni = tmp.indexOf('@@', idx+1);
	  if(ni < idx) 
	  {
	    System.out.println("ERROR: Input Field: '@@'-End Marker not found");
	    break;
	  }
	  if(ni == ++idx)
	  {
	    System.out.println("ERROR: Input Field: no name specified");
	    break;
	  }
	  String name = tmp.substring(idx, ni);
	  idx = ni;
	  TextField t;
	  if(fields == null || (t = (TextField)fields.get(name)) == null)
	  {
	    System.out.println("ERROR: Input Field: requested input \""
			      +name+"\" does not exist");
	    break;
	  }
	  cmd += t.getText();
	  break;
	}
	default : cmd += tmp.substring(idx, ++idx);
	}
	oldidx = ++idx;
      }

      if(oldidx <= tmp.length()) cmd += tmp.substring(oldidx, tmp.length());
      
      if(function != null)
      {
	if(function.equals("exit"))
	{ 
	  try {
	    System.exit(0);
	  } catch(Exception e) { e.printStackTrace(); }
	}
	if(function.equals("connect"))
	{
	  if(t != null) {
	    System.out.println("connect(): still connected!");
	    if(params == null) showStatus("Telnet: Still connected!");
	    return true;
	  }
	  try {
	    if(tio != null) tio.disconnect();
	    if((idx = cmd.indexOf(",")) >= 0) {
	      int tmpp;
	      try {
		tmpp = Integer.parseInt(cmd.substring(idx+1, cmd.length()));
	      } catch(Exception e) {
	        tmpp = port;
	      }
	      port = tmpp;
	      cmd = cmd.substring(0, idx);
	    }
	    if(cmd.length() > 0) address = cmd;
	    start();
	  } catch(Exception e) {
	    e.printStackTrace();
	  }
	} else
	if(function.equals("disconnect"))
	{
	  if(t != null) t.stop(); 
	  t = null;
	  try {
	    tio.disconnect();
	    term.putString("\r\nClosed connection.\r\n");
	  } catch(Exception e) {
	    e.printStackTrace();
	  }
	} else
	if(function.equals("detach"))
	  if(detached)
	    System.out.println("WARNING: Already detached!");
	  else
	  {
	    Frame top = new Frame("The Java Telnet Applet ["+
				  address+(port==23?"":" "+port)+"]");
	    top.add("Center", this);
	    top.resize(this.preferredSize());
	    top.pack();
	    top.show();
	    detached = true;
	  }
	else
	System.out.println("ERROR: function not implemented: \""
                             +function+"\"");
	return true;
      }
      cmd += tmp.substring(oldidx, tmp.length());
      byte[] buf = new byte[cmd.length()];
      cmd.getBytes(0, cmd.length(), buf, 0);
      try {
	if(connected) tio.send(buf);
	else localecho = true;
	if (localecho) term.putString(new String(buf, 0));
      } catch(IOException e) {
	try {
	  tio.disconnect();
	  term.putString("\n\rConnection closed.\n\r");
	  connected = false;
	} catch(IOException _e) {
	  _e.printStackTrace();
	}
      }
      return true;
    }
      
    if(fields != null)
      for(Enumeration e = fields.elements(); e.hasMoreElements();) 
	if(e.nextElement() == evt.target) return false;

    if(evt.id == Event.MOUSE_DOWN) ((Component)evt.target).requestFocus();

    /* Netscape for windows does not send keyDown when period is pressed.
     * This hack catches the keyUp event.
     */
    int id = evt.id;
    if(evt.key == '.' && evt.id == Event.KEY_RELEASE && evt.key != pressedKey)
      evt.id = Event.KEY_PRESS;
    
    if(evt.id == Event.KEY_PRESS)
    {
      if(id == Event.KEY_PRESS) pressedKey = evt.key;
      try {
        if(connected) {
		if (evt.key == 10) {
			tio.send((byte)13);
			tio.send((byte)0);/* YES, see RFC 854 */
		} else {
			tio.send((byte)evt.key);
		}
	}
	else localecho = true;
	if (localecho) {
	  if (evt.key!=10)
	    term.putChar((char)evt.key);
	  else {
	    term.putChar((char)13);
	    term.putChar((char)10);
	  }
	}
      } catch(IOException e) {
	try {
	  tio.disconnect();
	  term.putString("Connection closed.\n\r");
	  connected = false;
	} catch(IOException _e) {
	  _e.printStackTrace();
	}
      }
      return true;
    }
    return false;
   }

  public Object notifyStatus(Vector status)
  {
    String what = (String)status.elementAt(0);
    if(what.equals("NAWS"))
      return term.getSize();
    if(what.equals("TTYPE"))
      if(term.getTerminalType() == null)
	return emulation;
      else return term.getTerminalType();
    if(what.equals("LOCALECHO"))
      localecho = true;
    if(what.equals("NOLOCALECHO")) 
      localecho = false;
    if(what.equals("SEND"))
       try {
	 tio.send((byte[])status.elementAt(1));
       } catch(IOException e) { e.printStackTrace(); }
    return null;
  }
}
@


1.21
log
@Added rudimentary scripting.
@
text
@d4 2
a5 2
 * $Id: telnet.java,v 1.20 1996/09/09 06:34:07 leo Exp leo $
 * $timestamp: Tue Sep 17 13:57:59 1996 by Matthias L. Jugel :$
d48 1
a48 1
 * @@version $Id: telnet.java,v 1.20 1996/09/09 06:34:07 leo Exp leo $
d87 2
d126 1
a126 1
    
d431 16
a446 2
          System.out.println("ERROR: function not implemented: \""
			    +function+"\"");
@


1.20
log
@re-initialisation of localecho after disconnect.
@
text
@d4 2
a5 2
 * $Id: telnet.java,v 1.19 1996/09/06 06:54:43 leo Exp leo $
 * $timestamp: Fri Sep  6 08:42:06 1996 by Matthias L. Jugel :$
d48 1
a48 1
 * @@version $Id: telnet.java,v 1.19 1996/09/06 06:54:43 leo Exp leo $
d81 2
d231 18
d280 21
@


1.19
log
@Terminal id is retrieved from Terminal.
@
text
@d4 1
a4 1
 * $Id: telnet.java,v 1.18 1996/09/05 11:54:50 leo Exp leo $
d48 1
a48 1
 * @@version $Id: telnet.java,v 1.18 1996/09/05 11:54:50 leo Exp leo $
d242 1
@


1.18
log
@fixed bug for enter/return key
@
text
@d4 2
a5 2
 * $Id: telnet.java,v 1.17 1996/08/29 15:31:13 leo Exp leo $
 * $timestamp: Wed Sep  4 08:47:34 1996 by Matthias L. Jugel :$
d48 1
a48 1
 * @@version $Id: telnet.java,v 1.17 1996/08/29 15:31:13 leo Exp leo $
d464 3
a466 1
      return emulation;
@


1.17
log
@removed localecho = false; for port 23
@
text
@d4 2
a5 2
 * $Id: telnet.java,v 1.16 1996/07/19 12:31:06 leo Exp leo $
 * $timestamp: Thu Aug 29 17:30:43 1996 by Matthias L. Jugel :$
d48 1
a48 1
 * @@version $Id: telnet.java,v 1.16 1996/07/19 12:31:06 leo Exp leo $
d327 1
a327 1
	  if((t = (TextField)fields.get(name)) == null)
d361 7
a367 1
	      port = Integer.parseInt(cmd.substring(idx+1, cmd.length()));
d370 1
a370 1
	    address = cmd;
d427 8
a434 1
        if(connected) tio.send((byte)evt.key);
@


1.16
log
@fixed some typos.
@
text
@d4 2
a5 2
 * $Id: telnet.java,v 1.15 1996/07/10 15:31:38 leo Exp leo $
 * $timestamp: Fri Jul 19 13:24:09 1996 by Matthias L. Jugel :$
d48 1
a48 1
 * @@version $Id: telnet.java,v 1.15 1996/07/10 15:31:38 leo Exp leo $
a234 1
	if(port == 23) localecho = false;
@


1.15
log
@added port for connect()
@
text
@d1 1
a1 1
/*
d4 2
a5 2
 * $Id: telnet.java,v 1.14 1996/07/03 08:07:12 leo Exp leo $
 * $timestamp: Wed Jul 10 17:28:54 1996 by Matthias L. Jugel :$
d48 1
a48 1
 * @@version $Id: telnet.java,v 1.14 1996/07/03 08:07:12 leo Exp leo $
@


1.14
log
@removed debugging output
@
text
@d4 2
a5 2
 * $Id: telnet.java,v 1.13 1996/07/02 18:30:22 leo Exp leo $
 * $timestamp: Wed Jul  3 10:06:50 1996 by Matthias L. Jugel :$
d48 1
a48 1
 * @@version $Id: telnet.java,v 1.13 1996/07/02 18:30:22 leo Exp leo $
d136 2
a137 2
    applet.params.put("2#Button", "Connect|\\$connect(\\@@address@@)");
    applet.params.put("3#Input", "address|"
d139 2
a140 1
    applet.params.put("4#Button", "Disconnect|\\$disconnect()");
d239 1
a239 1
	  term.putString("Trying "+address+" ...\n\r");
d354 5
a358 2
	  if(t != null) t.stop(); 
	  t = null;
d361 4
d373 2
a374 1
	  t.stop(); t = null;
@


1.13
log
@minor change (removed System.out.println())
@
text
@d4 2
a5 2
 * $Id: telnet.java,v 1.12 1996/07/02 18:21:19 leo Exp leo $
 * $timestamp: Tue Jul  2 20:30:04 1996 by Matthias L. Jugel :$
d48 1
a48 1
 * @@version $Id: telnet.java,v 1.12 1996/07/02 18:21:19 leo Exp leo $
a449 2
         System.out.println(status.elementAt(1));

@


1.12
log
@*** empty log message ***
@
text
@d4 2
a5 2
 * $Id: telnet.java,v 1.11 1996/07/02 17:39:38 leo Exp leo $
 * $timestamp: Tue Jul  2 20:15:12 1996 by Matthias L. Jugel :$
d48 1
a48 1
 * @@version $Id: telnet.java,v 1.11 1996/07/02 17:39:38 leo Exp leo $
a281 1
	System.out.println(cmd);
@


1.11
log
@Scrollbar added in application mode.
@
text
@d4 2
a5 2
 * $Id: telnet.java,v 1.10 1996/07/02 17:34:35 leo Exp leo $
 * $timestamp: Tue Jul  2 19:38:09 1996 by Matthias L. Jugel :$
d48 1
a48 1
 * @@version $Id: telnet.java,v 1.10 1996/07/02 17:34:35 leo Exp leo $
@


1.10
log
@Bugfixes in button code.
@
text
@d4 2
a5 2
 * $Id: telnet.java,v 1.9 1996/06/28 10:35:34 leo Exp leo $
 * $timestamp: Tue Jul  2 17:06:20 1996 by Matthias L. Jugel :$
d48 1
a48 1
 * @@version $Id: telnet.java,v 1.9 1996/06/28 10:35:34 leo Exp leo $
d134 1
@


1.9
log
@hybrid construct (applet/application)
@
text
@d4 2
a5 2
 * $Id: telnet.java,v 1.8 1996/06/10 16:01:55 leo Exp leo $
 * $timestamp: Thu Jun 27 09:03:12 1996 by Matthias L. Jugel :$
d48 1
a48 1
 * @@version $Id: telnet.java,v 1.8 1996/06/10 16:01:55 leo Exp leo $
d280 2
d284 2
a285 2
	case 'n': cmd += tmp.substring(oldidx, idx-1)+"\n"; break;
	case 'r': cmd += tmp.substring(oldidx, idx-1)+"\r"; break;
d336 1
a336 1
	default : cmd += tmp.substring(oldidx, idx);
d340 2
@


1.8
log
@final revision.
@
text
@d4 2
a5 2
 * $Id: telnet.java,v 1.7 1996/03/28 23:42:08 msmeissn Exp leo $
 * $timestamp: Wed May  8 17:37:49 1996 by Matthias L. Jugel :$
d20 1
a20 1
 * along with GNU Emacs; see the file COPYING.  If not, write to the
d33 1
d48 1
a48 1
 * @@version $Id$
d86 2
d105 45
d153 1
a153 1
    
a226 1
    
d341 6
@


1.7
log
@wech halt
@
text
@d4 19
a22 2
 * $Id: telnet.java,v 1.6 1996/03/27 15:00:44 msmeissn Exp msmeissn $
 * $timestamp: Wed Mar 27 15:58:59 1996 by Matthias L. Jugel :$
d26 1
d28 1
d32 3
d36 2
d45 5
d52 4
d57 4
d63 3
d67 3
d71 3
d76 3
a78 3
  boolean localecho = true;
  boolean connected = false;
  int pressedKey = ' ';
d80 5
a84 1
  Thread t;
d115 1
a115 1
    
d124 56
a179 5
     setLayout(new BorderLayout());
     add("Center", term);

     tio = new TelnetIO();
     tio.setPeer(this);
d188 3
a190 1
	  term.putString("Trying "+address+(port == 23?"":port+"")+"...\n");
d192 1
a192 1
	  term.putString("Connected to "+address+"\n");
d195 1
a195 1
	  term.putString("Failed to connect.\n");
d216 1
a216 1
	  term.putString("Connection closed.\n");
d226 119
a354 1
      if(evt.key == 10) evt.key = 13;
d358 8
a365 1
	if (localecho) term.putChar((char)evt.key);
d369 1
a369 1
	  term.putString("Connection closed.\n");
@


1.6
log
@*** empty log message ***
@
text
@d4 1
a4 1
 * $Id: telnet.java,v 1.6 1996/03/27 14:59:15 leo Exp $
d13 1
d69 1
d152 1
a152 1
  public Object notifyStatus(Object status)
d154 2
a155 1
    if(((String)status).equals("NAWS"))
d157 1
a157 1
    if(((String)status).equals("TTYPE"))
d159 1
a159 1
    if(((String)status).equals("LOCALECHO"))
d161 1
a161 1
    if(((String)status).equals("NOLOCALECHO")) 
d163 6
a171 1

@


1.5
log
@Changes in parameter handling.
@
text
@d4 2
a5 2
 * $Id: telnet.java,v 1.4 1996/03/22 11:46:37 leo Exp leo $
 * $timestamp: Wed Mar 27 14:37:50 1996 by Matthias L. Jugel :$
d31 1
d119 1
a119 1
  public boolean keyDown(Event evt, int key)
d121 7
d130 2
a131 1
      if(key == 10) key = 13;
d133 1
a133 1
        if(connected) tio.send((byte)key);
d135 1
a135 1
	if (localecho) term.putChar((char)key);
@


1.4
log
@*** empty log message ***
@
text
@d4 2
a5 2
 * $Id: telnet.java,v 1.3 1996/03/22 11:44:26 leo Exp $
 * $timestamp: Fri Mar 22 11:46:09 1996 by Matthias L. Jugel :$
d27 1
d36 5
a40 9
    String pinfo[][] =
    {
        {"address",  "String",   "IP address"},
        {"port",     "Integer",  "Port number"},
        {"font",     "String",   "Font name"},
        {"fsize",    "Integer",  "Font size"},
        {"columns",  "Integer",  "Width of the screen in characters"},
        {"rows",     "Integer",  "Height of the screen in characters"},
        {"emulation","String",   "Emulation to be used (standard is vt320)"},
d42 5
d52 1
a52 2
    String tmp, font, emulation;
    int fsize, rows, columns;
a60 16
    if((font = getParameter("font")) == null)
      font = "Courier";
    if((tmp = getParameter("fontsize")) == null) 
      fsize = 14;
    else
      fsize = (new Integer(tmp)).intValue();
    
    if((tmp = getParameter("rows")) == null) 
      rows = 24;
    else
      rows = (new Integer(tmp)).intValue();
    if((tmp = getParameter("columns")) == null) 
      columns = 80;
    else
      columns = (new Integer(tmp)).intValue();

d66 1
a66 1
      term.InitializeTerminal(columns, rows, font, fsize);
d146 1
a146 1
      return "vt100";
@


1.3
log
@*** empty log message ***
@
text
@d4 2
a5 2
 * $Id: telnet.java,v 1.2 1996/03/18 20:41:19 leo Exp leo $
 * $timestamp: Thu Mar 21 14:36:24 1996 by Matthias L. Jugel :$
d10 1
a11 1
import java.awt.Graphics;
d22 6
a27 2
  TelnetIO tio = new TelnetIO();
  Terminal term;
d29 1
d37 7
a43 2
        {"address",  "String",  "IP address"},
        {"port",    "Integer",  "Port number"},
d50 25
a74 2
     String tmp, font, address;
     int port;
d76 9
a84 6
     font = getParameter("font");
     if((address = getParameter("address")) == null)
       address = getDocumentBase().getHost();
     if((tmp = getParameter("port")) == null) port = 23;
     else
       port = (new Integer(tmp)).intValue();
d87 3
a89 1
     term = new Terminal();
a90 11
     add("Center", term);
     if(port == 23) localecho = false;
     try {
       term.putString("Trying "+address
                     +(port == 23 ? "" : port+"")+"...\n");
       tio.connect(address, port);
       term.putString("Connected to "+address);
     } catch(IOException e) {
       term.putString("Failed to connect.\n");
       e.printStackTrace();
     }
d97 10
d122 8
a129 3
	term.putString("Connection closed.");
        e.printStackTrace();
	return;
d135 1
a135 1
    if(evt.target == term)
d139 3
a141 3
        tio.send((byte)key);
	if (localecho)
		term.putChar((char)key);
d143 7
a149 1
        e.printStackTrace();
d151 1
d153 1
a153 1
    return true;
d159 1
a159 1
      return new Dimension(term.getColumns(), term.getRows());
@


1.2
log
@telnet applet.
@
text
@d4 2
a5 2
 * $Id: telnet.java,v 1.1 1996/03/17 18:07:18 leo Exp leo $
 * $timestamp: Mon Mar 18 21:29:21 1996 by leo :$
d12 1
d20 1
a20 1
public class telnet extends Applet implements Runnable
d24 1
d54 1
d85 1
d87 1
d98 2
d107 1
a107 1
  public Object notifStatus(Object status)
d110 8
a117 1
      return new Dimension(term.getRows, term.getColumns);
@


1.1
log
@Initial revision
@
text
@d4 2
a5 2
 * $Id$
 * $timestamp::$
d13 1
d15 2
d50 1
d56 1
d100 1
a100 1
  public void paint(Graphics g)
d102 2
a103 1
    term.repaint();
d106 1
@
